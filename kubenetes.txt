
### find pods which belong to no rcs or rc is none
kubectl get pods --all-namespaces --no-headers | awk '{print $1"|"$2}' | while read i; do n=$(echo $i | awk -F'|' '{print $1}'); p=$(echo $i | awk -F '|' '{print $2}'); r=$(kubectl describe pod $p --namespace $n | grep "Replication Controllers" | awk '{print $3}'); if [ "$r" == "<none>" ]; then echo -e "$n\t$p\t$r"; fi; done;

### get the image versions of the containers in the pods
kubectl get pods --all-namespaces --no-headers | awk '{print $1"|"$2}' | sort | uniq | while read i; do n=$(echo $i | awk -F'|' '{print $1}'); p=$(echo $i | awk -F '|' '{print $2}'); r=$(kubectl describe pod $p --namespace $n | grep "Replication Controllers" | awk '{print $3}'); image=$(kubectl describe pod $p --namespace $n | grep "Image:" | awk '{print $2}' | sed -e 's/quay.io\/weightwatchers\///g'); echo -e "$n\t$r\t$p\t\n$image"; echo; done;


### get all core and chassis pods
kubectl get pods --all-namespaces --no-headers | awk '{print $1"|"$2}' | sort | uniq | while read i; do n=$(echo $i | awk -F'|' '{print $1}'); p=$(echo $i | awk -F '|' '{print $2}'); r=$(kubectl describe pod $p --namespace $n | grep "Replication Controllers" | awk '{print $3}'); image=$(kubectl describe pod $p --namespace $n | grep "Image:" | awk '{print $2}' | sed -e 's/quay.io\/weightwatchers\///g'); echo -e "$n\t$r\t$p\t\n$image"; echo; done | grep -e ^core- -e ^chassis- | sort | uniq


### mark nodes as unschedulable
#### http://kubernetes.io/docs/admin/node/
kubectl patch nodes $NODENAME -p '{"spec": {"unschedulable": true}}'

### ansible command get ips of all pods
ansible -vv -i inventory/<inventory_file> <kubernetes_master_host_group> -m shell -a 'kubectl get pods --namespace <namespace> --no-headers | grep -v <exclusion_1> | grep -v <exclusion_2>  | awk "{print \$1}" | while read i; do ip=$(kubectl describe pod $i --namespace <namespace> | grep "IP:" | awk "{print \$2}"); echo -e  "$i\t$ip"; done;'

### scale replicas
kubectl scale rc <rc_name> --replicas=3  --namespace <namespace>

### get all services with nodeports
kubectl get services --all-namespaces -o yaml | grep -B9 nodePort | grep -e name -e namespace  -e nodePort | grep -v namespaces | grep -v '\- name' | while read i; do if [ -z "${i##*namespace:*}" ]; then namespace=$(echo $i | sed 's/namespace: //g'); fi; if [ -z "${i##*name:*}" ]; then service=$(echo $i | sed 's/name: //g'); fi; if [ -z "${i##*nodePort:*}" ]; then  nodeport=$(echo $i | sed 's/nodePort: //g'); fi; if [ -n "$nodeport" ]; then echo -e "$namespace $service $nodeport"; unset nodeport; fi; done;
