
### find pods which belong to no rcs or rc is none
kubectl get pods --all-namespaces --no-headers | awk '{print $1"|"$2}' | while read i; do n=$(echo $i | awk -F'|' '{print $1}'); p=$(echo $i | awk -F '|' '{print $2}'); r=$(kubectl describe pod $p --namespace $n | grep "Replication Controllers" | awk '{print $3}'); if [ "$r" == "<none>" ]; then echo -e "$n\t$p\t$r"; fi; done;

### get the image versions of the containers in the pods
kubectl get pods --all-namespaces --no-headers | awk '{print $1"|"$2}' | sort | uniq | while read i; do n=$(echo $i | awk -F'|' '{print $1}'); p=$(echo $i | awk -F '|' '{print $2}'); r=$(kubectl describe pod $p --namespace $n | grep "Replication Controllers" | awk '{print $3}'); image=$(kubectl describe pod $p --namespace $n | grep "Image:" | awk '{print $2}' | sed -e 's/quay.io\/weightwatchers\///g'); echo -e "$n\t$r\t$p\t\n$image"; echo; done;


### get all core and chassis pods
kubectl get pods --all-namespaces --no-headers | awk '{print $1"|"$2}' | sort | uniq | while read i; do n=$(echo $i | awk -F'|' '{print $1}'); p=$(echo $i | awk -F '|' '{print $2}'); r=$(kubectl describe pod $p --namespace $n | grep "Replication Controllers" | awk '{print $3}'); image=$(kubectl describe pod $p --namespace $n | grep "Image:" | awk '{print $2}' | sed -e 's/quay.io\/weightwatchers\///g'); echo -e "$n\t$r\t$p\t\n$image"; echo; done | grep -e ^core- -e ^chassis- | sort | uniq


### mark nodes as unschedulable
#### http://kubernetes.io/docs/admin/node/
kubectl patch nodes $NODENAME -p '{"spec": {"unschedulable": true}}'

### ansible command get ips of all pods
ansible -vv -i inventory/<inventory_file> <kubernetes_master_host_group> -m shell -a 'kubectl get pods --namespace <namespace> --no-headers | grep -v <exclusion_1> | grep -v <exclusion_2>  | awk "{print \$1}" | while read i; do ip=$(kubectl describe pod $i --namespace <namespace> | grep "IP:" | awk "{print \$2}"); echo -e  "$i\t$ip"; done;'

### scale replicas
kubectl scale rc <rc_name> --replicas=3  --namespace <namespace>
kubectl scale statefulsets <stateful-set-name> --replicas=<new-replicas>

### get all services with nodeports
kubectl get services --all-namespaces -o yaml | grep -B9 nodePort | grep -e name -e namespace  -e nodePort | grep -v namespaces | grep -v '\- name' | while read i; do if [ -z "${i##*namespace:*}" ]; then namespace=$(echo $i | sed 's/namespace: //g'); fi; if [ -z "${i##*name:*}" ]; then service=$(echo $i | sed 's/name: //g'); fi; if [ -z "${i##*nodePort:*}" ]; then  nodeport=$(echo $i | sed 's/nodePort: //g'); fi; if [ -n "$nodeport" ]; then echo "$namespace/$service $nodeport"; unset nodeport; fi; done;

### get all services with nodeports using jq
kubectl get services --all-namespaces -o json | jq '.items[] |  .spec.ports[].nodePort as $nodePort | if $nodePort != null then .metadata.name +"  " + .metadata.namespace + "  "+($nodePort | tostring)  else "EXCLUDE"  end'  | grep -v "EXCLUDE" | sed 's/"//g'

### get all pod ips that are misregistered against other services in kube servers, because of a bug this happens when massive pod rolls happens
kubectl get deployments --all-namespaces --no-headers | awk '{print $1"|"$2}' | sort | uniq | while read i; do n=$(echo $i | awk -F'|' '{print $1}'); d=$(echo $i | awk -F '|' '{print $2}');  echo -e "$n\t$d"; ips=$(__ips=""; kubectl get pods --namespace $n --no-headers | grep $d  | awk '{print $1}'| while read p; do kubectl get pods $p --namespace $n -o json| jq ".status.podIP" | sed 's/"//g'; done | sort | uniq | while read ip; do __ips="$__ips -ve $ip"; echo $__ips; done;); iptables -w -t nat -L | grep "$n/$d"| grep KUBE-MARK-MASQ |  grep $(echo "$ips" | tail -1); echo -e "\n\n\n"; done;

### selecting pods, selects pods that do not match heapster and influxdb
kubectl get pods -n system -l 'name notin (heapster, influxdb)'

### get core/cpu allocation per node and have it sorted on 2nd column
kubectl get pods --all-namespaces -o wide --no-headers | awk '{print $1"|"$2"|"$8}' | sort | uniq | while read i; do n=$(echo $i | awk -F'|' '{print $1}'); p=$(echo $i | awk -F '|' '{print $2}'); h=$(echo $i | awk -F '|' '{print $3}'); cpu=$(kubectl describe pod $p -n $n | grep  -zo "Limits:\s.*cpu:\s*[[:digit:]]*" | tail -1  | awk '{print $2}'); if [ ! -z $cpu ]; then echo $cpu $h; fi; done | awk '{arr[$2]+=$1} END {for (i in arr) {print i,arr[i]}}' | sort -k2 -nr

### get total cpus used
kubectl get pods --all-namespaces -o json | jq '.items[] | .spec.containers[].resources.requests.cpu' | grep -v null | sed 's/"//g' | awk '{SUM+=$1} END {print SUM}'

### get total cpus used/requested including the millicpus
kubectl get pods --all-namespaces -o json | jq '.items[] | .spec.containers[].resources.requests.cpu' | grep -v null | sed 's/"//g'| while read i; do if [[ $i == *m ]]; then i=${i%%m}; i=$(awk "BEGIN {printf \"%.2f\",${i}/1000}"); fi; echo $i; done | awk '{SUM+=$1} END {print SUM}'

### get total memory used/requested
kubectl get pods --all-namespaces -o json | jq '.items[] | .spec.containers[].resources.requests.memory' | grep -v null | sed 's/"//g'| while read i; do if [[ $i == *Mi ]]; then i=${i%%Mi}; i=$(awk "BEGIN {printf \"%.2f\",${i}/1000}"); fi; if [[ $i == *Gi ]]; then i=${i%%Gi}; fi; echo $i; done | awk '{SUM+=$1} END {print SUM}'

### go template example
kubectl get pods --no-headers --namespace=kube-system --output go-template='{{range.items}}{{$app := index .metadata.labels "k8s-app"}}{{if $app }}{{if eq $app "logs"}}{{if eq .status.phase "Running"}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}{{end}}{{end}}' | xargs -I {} kubectl delete pod --namespace=kube-system {}

### go template example with key value pair
kubectl get statefulset --output go-template='{{range.items}}{{range $key, $value := .status.ready}}{{$key}}: {{$value}}{{"\n"}}{{end}}{{end}}'

### get events for crashing pods
### https://stackoverflow.com/a/51931477
kubectl get pods --all-namespaces -o wide | grep CrashLoopBackOff | awk '{print $1" "$2}'| while read i; do pod=$(echo $i| awk '{print $2}'); namespace=$(echo $i | awk '{print $1}'); echo $pod $namespace; kubectl get event --namespace $namespace --field-selector involvedObject.name=$pod ; echo; echo; done;

####
kubectl run alpine --image=alpine --command -- tail -f /dev/null

#### get allocated cpu reqs and mem reqs on nodes
echo -e "node\t\t\t\t\t\tcpu reqs\tmem reqs";kubectl get nodes -A -o=jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | while read node; do cpu=$(kubectl describe node $node | grep -e cpu | grep -v -e cpu: | awk '{print $2" "$3}'); mem=$(kubectl describe node $node | grep -e memory | grep -v -e memory: -e MemoryPressure | awk '{print $2" "$3}'); echo -e "$node\t$cpu\t$mem"; done;


### jsonpath skip special chars
kubectl -n default get secrets docker-creds -o jsonpath="{.data.\.dockerconfigjson}" | base64 -d

### get ip of a pod with a specific interface
kubectl -n default get pod storage -o=jsonpath='{.status.interfaces[?(@.interfaceName=="ADMIN")].ipAddress}' | sed 's|/.*||'

### get ip of a node that the pod is on
kubectl get node $(kubectl -n default get pod storage -o=jsonpath='{.status.nodeName}') -o=jsonpath='{.status.addresses[?(@.type=="InternalIP")].address}'

### get service account jwt token
kubectl -n default get secret $(kubectl -n default get serviceaccount admin -o=jsonpath='{.secrets[0].name}') -o=jsonpath='{.data.token}' | base64 -d

### get events for objects by name
kubectl -n default get events --field-selector involvedObject.name=pod-xyz-123

### get permissions/rbac of current user
kubectl -n default auth can-i --list

### get permissions/rbac of a serviceaccount
kubectl -n default auth can-i --list --as=system:serviceaccount:namespace:serviceaccount

### get pods that are not ready
### https://gist.github.com/ernoaapa/c8ef4973aa30104cfc898ec94b7e3f29
kubectl get pods --all-namespaces -o go-template='{{ range  $item := .items }}{{ range .status.conditions }}{{ if (or (and (eq .type "PodScheduled") (eq .status "False")) (and (eq .type "Ready") (eq .status "False"))) }}{{ $item.metadata.name}} {{ end }}{{ end }}{{ end }}'

### delete evicted pods
namespace=namespace; kubectl -n $namespace delete pods $(kubectl -n $namespace get pods -o=jsonpath='{.items[?(@.status.reason=="Evicted")].metadata.name}')
